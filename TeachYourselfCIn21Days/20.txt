第20天课程 管理内存

类型转换
自动类型转换：类型提升(char, short, int, long, long long, float, double, long double)，赋值时转换
显式转换：(typename)

分配内存的存储空间   size_t是unsigned的别名
void *malloc(size_t num); //分配num个字节的空间，并返回指向第一个字节的指针，否则返回NULL。
void *calloc(size_t num, size_t size); //num是要分配的对象数，size是每个对象的大小。
如果分配成功，则将所有内存内容设为0，返回指向第一个字节的指针；否则返回NULL指针。
void *realloc(void *ptr, size_t size); //用于改变使用malloc()或calloc()分配的内存块的大小，ptr指向原理内存块，新大小有size决定。
如果有足够的空间用于扩大ptr指向的内存块，则分配额外的内存，并返回ptr；
如果没有足够的空间用于扩大内存块，则分配一个size字节的新内存块，将原来内存块中的数据复制到新内存块的开头，释放原来的内存块，返回指向新内存块的指针；
如果ptr为NULL，则类似于malloc()，分配一个size字节的内存块，并返回一个指向该内存块的指针；
如果size为0，则释放ptr指向的内存，并返回NULL；
如果没有足够的可用内存来完成重新分配，则返回NULL，而原来的内存块保持不变。
void free(void *ptr);  //释放ptr指向的内存。

操纵内存块
void *memset(void *dest, int c, size_t count);  //将内存块中的字节设置为特定的值。
//dest指向要初始化的内存块，c是要设置的值，count指定从dest开始设置多少字节。
void *memcpy(void *dest, void *src, size_t count);   //在内存块之间复制数据。
//dest和src分别指向目标内存块和源内存块，count指定要赋值多少个字节，返回值为dest。
void *memmove(void *dest, void *src, size_t count);   //将一个内存块中指定数目的字节复制到另一个内存块中。
//它能够处理相互重叠的内存块

位的用法
移位运算符：<<左移位，>>右移位。 x<<n; x>>n;
按位逻辑运算符：&与，|或，^异或。
求补运算符：~
结构中的位字段：struct xxx{ typename xxx: n; };  //可以声明一个任何数目位的位字段。

END
