05.01 vimrc文件

:$MYVIMRC 在vim内部打开已存在的vimrc文件。【这个功能貌似不可用，是我理解有误吗？】
:version 列出vim会在哪些目录中寻找vimrc文件。

类Unix系统推荐的vimrc文件为：~/.vimrc，即位于用户目录下。
vimrc文件里可以包含任何你可以在冒号命令行上使用的命令，只需要把冒号去掉，写入vimrc文件即可。
冒号命令行内容 :set incsearch ---> vimrc文件内容 set incsearch

05.02 vimrc示例

vimrc示例文件存放位置：$VIMRUNTIME/vimrc_example.vim

:help 学习更多的相关内容

set nocompatible  //关闭对VI的兼容
set backspace=indent,eol,start  //Insert模式下退格键何时可以删除光标之前的字符：行首空格，断行，进入Insert之前的位置【不太明白，实操一下】
set autoindent  //在开始一个新行时对该行使用上一行的缩进方式

if has("vms")
  set nobackup
else
  set backup
endif
//覆盖一个文件之前备份该文件，但对vms系统除外，备份文件名由当前文件名加后缀"~"组成

set history=50  //设置冒号命令和搜索命令的命令历史队列的长度
set ruler  //总是在vim窗口右下角显示当前光标的行列信息
set showcmd  //在vim窗口的右下角显示一个完整的命令已经完成输入的部分
set incsearch  //在你键入要搜索的字符串的同时就开始搜索当前已经键入的部分

map Q gq  //定义了一个Q命令，并映射到gq操作符命令

vnoremap _g y:exe "grep /" . escape(@", '\\/') . "/ *.c *.h"<CR>  //这个映射取得Visual区域的内容，然后在C文件中搜索，复杂的映射

if &t_Co > 2 || has("gui_running")
  syntax on  //打开语法高亮功能
  set hlsearch  //高亮所有与最后一次搜索目标串相匹配的文本
endif
//当系统支持彩色显示时打开语法高亮功能

filetype plugin indent on  //自动识别文件类型；用文件类型plugin脚本；使用缩进定义文件

autocmd FileType text setlocal textwidth=78  //当前行超过78个字符的时候，自动断行，只对普通文本文件text有效

autocmd BufReadPost *
  \ if line("'\'") > 1 && line("'\'") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif
//检查是否定义了标记'"，如果定义了就跳转到这个位置。是用于所有类型的文件。
//反斜杠表示该行是前一行命令的延续

05.03 简单的映射

:map <F5> i{<Esc>ea}<Esc>  //把某些词用花括号括起来。把光标置于该词的首字符上，然后按F5。
:map \p i(<Esc>ea)<Esc>  //把某些词用圆括号括起来。把光标置于该词的首字符上，然后按\p。
                          //两个字符的间隔要很短才被看做一个映射，否则识别为两个独立普通字符。
:map  //列出当前已定义的所有映射

最好避免把已有的Vim命令作为一个映射，这样会覆盖其之前的功能。


