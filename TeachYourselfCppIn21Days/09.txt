第9章 使用引用

引用几乎提供了指针的所有功能，但语法更简单   引用运算符&   引用类似于别名。
声明引用的同时必须对其进行初始化，如果创建引用时不给它赋值，将会出现变异错误。
使用引用时不使用地址运算符，引用就相当于目标变量，不能给引用重新赋值。
指针没有初始化或删除指针时应将其赋值为空0；必须在创建引用的同时将引用初始化为它指向的东西。
不要混淆地址运算符和引用运算符。  引用和变量使用相同的内存。
函数的两个缺点：参数按值传递，返回语句只能返回一个值。
按引用传递参数可以克服这两个缺点：使用指针按引用传递int * p = &x，使用引用按引用传递 int & p = x。
两者语法不同，但效果相同：相当于让函数能够访问原始对象。
按引用传递让函数能够修改原始对象，相当于让函数返回两组信息。
C语言中不能够使用引用。
按值将对象传递给函数式，会创建该对象的一个副本，按值返回对象时将创建另一个副本。
创建这些临时副本时，都要调用一个特殊的构造函数：复制构造函数。函数返回时，临时对象被销毁，会调用析构函数。
两个情况都会扩大速度和内存的开销，而按引用传递可以减少函数调用，但会失去按值传递对数据提供的保护。
传递一个指向const对象的指针，可以防止对对象调用任何非const方法，从而防止对象被改变。
传递const引用让人能够看到原物，但不允许做任何改变。   同样可以用引用替换指针。   引用必须在声明的时候赋值，且不能被重新赋值。
引用相对来说更清晰，更容易使用，而且能够更好地隐藏信息。 混合使用指针和引用时允许的。
绝不要在同一行中同时声明引用、指针和变量。
引用指向的对象的作用域要确定时钟没问题，不能够返回指向不再作用域（局域变量）中的对象的引用。
可以返回指向 堆/自由存储区 中对象的引用，因为其需要手动释放，但会导致内存泄露。释放方法也会很麻烦，需另建指针。
