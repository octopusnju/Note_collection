第29章 杂项内容

在编译器运行之前将运行预处理器，这提供了条件编译的机会。
预处理器查找预处理指令，每条预处理指令都以#打头，这些指令的作用是修改源代码的文本，结果为一个新的源代码文件。
编译器并不读取原始的源代码文件，而是读取预处理器的输出并对其进行编译。

#include    加载其他文件

#define     定义字符串替换
1. 用于定义常量，只进行替换而不做类型检查。使用关键字const具有更多优点，更推荐。
2. 用于指出某个字符串定义过。
#define DEBUG
#if defined DEBUG
statements;    //根据判断结果决定内容是否写入中间文件进行编译
#endif    //用来指定受检测影响的代码到什么地方结束
预编译器遇到#if defined时，将检查一个已创建的表，看其后面的值是否定义了。
同义词：#if defined == #ifdef       #if !defined == #ifndef

#else    在#ifdef/#ifndef和#endif之间使用，进行选择性编译。

在进行头文件包含是，由于使用同一类创建多个对象，可能会导致同一个头文件被包含多次。
这将导致编译错误，因为头文件包含多次，意味着文件中的类重复声明多次。
为解决这种问题，可使用多重包含防范(inclusion guard)。在头文件开头添加如下代码：
#ifndef ANIMAL_HPP
#define ANIMAL_HPP
...//整个头文件内容
#endif
ANIMAL_HPP的名称可以任意，仅作为用来检测的标识符。习惯上使用全部大写的文件名，并将点改为下划线。
使用多重包含防范不会有任何害处，还常可以节省大量的调试时间。

字符串化运算符(#):将其后面的内容转换为用引号括起来的字符串。
拼接运算符(##):将多个单词合并成一个新词。新词实际上是一个符号，可用作类名、变量名、数组名或出现在任何可使用字符串的地方。

预定义的宏：__DATE__,替换为当前日期；__TIME__,替换为当前时间；__LINE__,替换为源代码行数；__FILE__,替换为文件名。
这些替换是在预编译源代码时进行的。

assert()宏：参数的值为true时，返回true；否则执行某种操作。通常的操作为中止程序或引发异常。【相关异常内容也先跳过】

位运算：可以将一个变量的位用作标记，1为被设置，0为被清除。
位运算符符号：
& 与； | 或； ^ 异或； ~ 求反。
可以通过“或”运算来设置某个位，可以通过“与”运算来清除某个位，可以通过“异或”运算来反转某个位。
位字段：命名和访问方式与其他类成员相同，类型总是unsigned int，并在位字段名后加上冒号和数字（分配内存的位数）。

编程风格
缩进：制表符应为3个字符，确保编辑器将制表符转换为3个空格。
大括号：匹配的大括号应垂直对齐；定义和声明中最外面的大括号应在最左边，内部的语句应该缩进；大括号应独占一行。
长代码行：确保不用水平滚动就能看到整行代码。将一行代码分成多行时，对后续行进行缩进。将插入运算符放在前一行的末尾。
函数长度：尽量使函数足够短，以便可以在一页中打印函数的全部代码。

程序文本：可用多种技巧来使代码易于阅读。易读的代码通常更容易维护。
1. 使用空白来提高可读性；
2. 不要在对象、数组名和运算符(., ->, [])之间使用空格
3. 单目运算符与其操作数相关联，不要在他们之间添加空格，但要在操作数另一边添加空格。（!, ~, ++, --, *指针, &地址, sizeof)
4. 双目运算符两边都应有空格
5. 不通过省略空格来提示优先级
6. 在逗号和分号后面加上空格，但在其前面不加
7. 圆括号两边不应有空格
8. 用空格将关键字分开
9. 使用空格将单行注释的内容同//分开
10. 将指针或引用指示符紧靠类型名，而不是变量名
11. 不在一行中声明多个变量。

标识符命名
1. 标识符名称应足够长以便具有描述性
2. 避免意义不明确的缩写
3. 花时间和精力将含义拼写出来
4. 不使用匈牙利表示法
5. 仅当简短性可提高代码的可读性或用途十分明显不需要描述性名称时，才使用短名称
6. 变量名的长度应与其作用域相称
7. 确保标识符看上去和听上去都相互不同，以尽可能减少混淆
8. 函数或方法名通常为动词或动词-名词短语
9. 变量名通常为抽象名词，可以带一个附加名词。bool变量应相应地命名。

名词的拼写和大写
1. 对应使用#define定义的常量，采用全部大写并用下划线将其中的单词分开。（实际C++中大部分使用const和模板）
2. 其他标识符应采用大小写混合，没有下划线。
   函数、方法、类、typedef、结构的名称应采用首字母大写。
   数据成员和局部变量不采用首字母大写。
3. 枚举常量应以表示枚举类型缩写的小写字母开头。

注释
1. 尽可能使用单行注释而不是多行注释。
2. 高级注释比处理细节更重要，要增加价值而不要复述代码。
   重点放在函数和代码块语义上，指出函数的功能、副作用、参数类型和返回值，描述作出或没有作出的所有假设。
   在复杂的逻辑中，使用注释来指出当前的状态。
3. 使用采用合适标点符号和大小写的完整句子。不要过于晦涩，也不要使用缩写。
4. 使用空行来帮助读者理解所发生的事情，将语句分成逻辑组。

设置访问权限
1. 总是使用public:, private:, protected:, 不要依赖于默认访问设置。
2. 先列出公有成员，其实是保护成员，然后是私有成员。在方法后面集中列出数据成员。
3. 在各个部分首先列出构造函数，然后是析构函数。集中列出同名的重载方法，尽可能集中列出存取器函数。
4. 考虑按字母顺序排列每组中的方法和成员变量。包含文件时，按字母顺序排列它们。
5. 虽然覆盖函数时关键字virtual是可选的，但应尽可能使用它，用于提醒和保持一致。

类定义
尽可能确保方法实现的排列顺序和声明顺序一致。定义函数时，返回值类型和其他所有限定符都放在前一行，让类名和函数名位于行首。

包含文件
尽可能少于#include，最大限度减少在头文件中包含的文件。所有的头文件都应使用多重包含防范。

使用const
在合适的地方使用const：参数、变量和方法。 方法需要有const版本和非const版本。 
显式地在const和非const之间转换时务必小心，请确保这种转换有意义并进行注释。

阅读其他书籍，要学的知识很多。加入一个优秀的C++组。不要只阅读代码，学习C++的最佳方法是编写C++程序。

