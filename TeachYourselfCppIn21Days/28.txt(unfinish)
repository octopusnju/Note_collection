第28章 处理异常

程序中的各种错误
编写健壮、没有bug的程序时任何对编程持严肃态度者的首要任务！！！
软件业中最大的问题就是有错误、不稳定的代码。
在很多重要的编程中，花费最大的是测试和修改，以低成本按时生成出优秀、稳定、可靠的程序的人将给软件业带来革命性影响。
逻辑性差：程序能够完成要求的工作，但没有正确地考虑算法；
语法问题：使用错误的惯用语、函数或结构。
开发过程中发现逻辑问题的时间越晚，修复它所需付出的代价越高。
费用最低的修复问题的方法是尽量避免产生错误，其次是编译器可发现的错误。
与只是偶尔导致程序崩溃的错误相比，发现和修复让程序能够通过编译但首次测试就出现的错误的代价更低些。
比逻辑和语法错误更常见的运行阶段的问题是脆弱性，为避免脆弱性，程序员致力于提高程序的健壮性。
区分bug，逻辑错误和异常至关重要：
bug是由于程序员犯错引起的；逻辑错误是由程序员对解决问题的方式不了解引起的；异常是由于不常见但可预见的问题引起的。

异常情况
你无法消除异常情况，只能为异常情况做好准备：不能让程序崩溃！
C++的异常处理提供了一种类型安全的集成方法，来应对程序运行时出现的可预见到但不常发生的情形。
异常的基本思想：
1. 计算机试图执行一段代码。这段代码可能要分配资源（如内存）、锁定文件或执行其他各种任务。
2. 包含应对代码由于异常原因而执行失败的逻辑（代码）。
3. 在代码被其他代码使用时，需要一种机制来将有关问题（异常）的信息传递到下一级。
   应有一条从问题发生的代码到处理错误状态的代码的路径。
   如果函数之间存在中间层，应该给他们提供解决问题的机会，但不应要求他们包含只是为了传递错误状态的代码。
要处理异常，必须首先确定要监视哪段代码可能发生的异常，应创建try块来包围可能导致问题的代码块。
try { SomeDangerousFunction(); }
catch(OutOfMemery) { //take some actions  }
catch(FileNotFound) { //take other action }
catch(...) { }
当try块中的代码执行时，如果发生异常，则被称为引发异常。然后可以使用catch块来捕获引发的异常。
引发异常后，将转移到当前try块后面合适的catch块执行。catch块中使用省略号(...)表示任何异常。
catch块也被称为处理程序，因为它能够处理异常。
可以将catch块视为类似于被重载的函数，找到特征标匹配的函数后，将执行它。
处理异常的基本步骤如下：
1. 确定程序中执行某种操作且可能引发异常的代码，并将它们放到try块中；
2. 创建catch块，在异常被引发时捕获它们。可创建捕获特定类型异常或者所有异常的catch块；
使用异常处理，在try块中的代码发生异常时，程序不会崩溃，能够报告问题并妥善退出。

创建自己的、将被处理的异常类型。可以自定义异常处理程序(catch块)，使其对你的程序有意义。
要创建导致try块语句对其作出反应的异常，可使用关键字throw。
throw exception;
该语句引发异常exception，导致程序跳到一个处理程序处执行，如果没有找到匹配处理程序，程序将终止。
引发异常时，几乎可以使用任何类型的值，可以为程序可能引发的每种异常编写相应的处理程序。
如果在函数中引发异常，该函数又被其他函数调用，可将异常向上传递，调用throw命令且不提供任何参数，将在当前位置重新引发现有异常。

确定在什么地方放置try块很困难：可能引发异常的操作并非总是那么明显。
下一个问题是在什么地方捕获异常，也许想在分配内存的地方引发所有内存异常，但想在上层处理用户界面的地方捕获异常。
try/catch块通常放在高级函数中，尤其是那些知道程序用户界面的函数。

捕获异常的工作原理：异常被引发后，将检查调用栈。调用栈是在程序的一部分调用另一个函数时创建的函数调用列表。
调用栈记录执行路径。（递归函数可能出现多次）
异常沿调用栈向上传递给每个封闭块，被称为堆栈解退。当堆栈被解退时，对堆栈中的局部对象调用析构函数，从而将对象销毁。
每个try块后面会有catch语句，若匹配，则执行该catch语句并认为异常已得到处理。
若无匹配，则继续解退堆栈。若到main()仍未被捕获，将调用内置的处理程序来终止程序。
异常沿堆栈向上传递是条单行线。异常向上传递的过程中，堆栈被解退，堆栈中的对象被销毁，没有回头路可走。
异常被捕获后，程序将继续执行捕获异常的catch后面的语句。
异常是类，也可以从他们派生出其他类。


【关于异常感觉只看书本学习很困难，暂时跳过，以后用到的时候再回头学习】
