第8章 简述指针

使用指针直接操纵计算机内存，C++相对于Java，C#和Visual Basic的优点之一。
地址运算符&     指针一定要初始化。
间接运算符* 又称解除引用运算符。    不要将指针指向的地址与存储在该地址处的值混为一谈。
数组名可以作为指针常量。  指针数组   数组指针
指针用途：管理自由存储区中的数据；访问类的成员数据和函数；按引用传递参数。

局部变量和函数参数位于对战中；代码位于代码空间；全局变量位于全局名称空间；寄存器用于内部管理；剩下部分为自由存储区，称为堆。
自由存储区的优点：分配的内存一直可用，直至明确将其释放。也是缺点，忘记释放后会导致占用越来越多，直至系统崩溃。 需要使用指针访问。
使用关键字new分配自由存储区中的内存，返回内存地址
使用关键字delete归还内存，应用于指针。    内存被取消指向后不会自动归还，导致内存泄露。
程序中每个new都应该有对应的delete。   也可以用相同方法在自由存储区创建对象和删除对象。
delete之后，指针变量仍然存在，仍指向之前的内存区域，但该内存可能已被修改。安全起见，delete之后应该将指针赋值为NULL 0。

const指针：
const int *ptr;  指向整型常量的指针，指向的值不能修改。  等价于(const int) *ptr;
int * const ptr;  指向整型的常量指针，指向的值可以修改，但不能指向其他变量。  等价于 int * (const ptr);
const int * const ptr;  指向整型常量的常量指针，指向的值不能修改，指针也不能指向其他变量。  等价于 (const int) * (const ptr);
在自由存储区创建对象不需要实现声明变量个数，比较灵活。
