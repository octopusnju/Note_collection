第24章 自适应容器：栈和队列

标准模板库STL提供了一些这样的容器，使用其他容器模拟栈和队列的行为。
这种内部使用一种容器但呈现其他容器的行为特征的容器称为自适应容器(adaptive container)。

栈和队列与数组或列表极其相似，但对插入、访问和删除元素的方式有一定的限制。
栈是后进先出LIFO系统，只能从栈顶插入或删除元素，不允许访问中间的元素。
泛型STL容器std::stack模拟了栈的行为，需要包含头文件 #include <stack>
队列是先进先出FIFO系统，元素被插入到队尾，最先插入的元素最先删除。
泛型STL容器std::queue模拟了队列的行为，头文件 #include <queue>

std::stack的定义如下，举例说明：
template <class elementType, class Container = deque<type>> class stack;
参数elementType是stack存储的对象的类型。第二个模板参数Container是stack使用的默认底层容器实现类。
stack默认在内部使用std::deque来存储数据。通过显式设置第二个模板参数，可指定在内部使用vector或list来存储数据。
stack <int> stackInt;    stack <double> stackDouble;    stack <double, vector<double>> stackDoubleVector;

stack改变了其他容器的行为，通过限制元素插入或删除的方式实现其功能，从而提供严格遵守栈机制的行为特征。
std::stack的成员函数
push   在栈顶插入元素   stackInt.push(25);
pop    删除栈顶的元素   stackInt.pop();
empty  检查栈是否为空并返回一个bool值   stackInt.empty();
size   返回栈中的元素数   size_t nElements = stackInt.size();
top    获得指向栈顶元素的引用   stackInt.top();
禁用了容器的其他功能，只保留了与栈行为对应的功能。

STL queue是个模板类，需要包含头文件 #include <queue>
queue是个泛型类，只允许在末尾插入元素以及从开头删除元素，不允许访问中间的元素。定义如下：
template <class elementType, class Container = deque<Type>> class queue;
参数elementType是queue存储的对象的类型。第二个模板参数Container是queue使用的默认底层容器实现类。默认为deque，可用vector,list.
queue <int> qInt;   queue <double> qDouble;   queue <double, list <double>> qDoubleList;
std::queue的成员函数
push   在队尾（最后一个位置）插入一个元素   qInt.push(25);
pop    将队首（最开始位置）的元素删除   qInt.pop();
front  返回指向队首元素的引用   qInt.front();
back   返回指向队尾元素（最后插入的元素）的引用   qInt.back();
empty  检查队列是否为空并返回一个bool值   qInt.empty();
size   返回队列中的元素数   size_t nNumElements = qInt.size();

STL priority_queue是一个模板类，需要包含头文件 #include <queue>
priority_queue与queue的不同之处在于，包含最大值（或二元谓词认为的最大值）的元素位于队首，且只能在队首执行操作。
定义如下：  
template <class elementType, class Container=vector<type>, class Compare=less<typename Container::value_type>> class priority_queue
elementType是一个模板参数，知道了优先级队列将包含的元素的类型；第二个模板参数指定优先级队列在内部将使用哪个集合类来存储数据；
第三个参数指定一个二元谓词，帮助队列判断哪个元素位于队首，默认使用std::less，使用运算符<比较对象。
priority_queue <int> pqInt;   priority_queue <double> pqDouble;  
priority_queue <int, deque<int>, greater<int>> pqIntInverse;
priority_queue的成员函数：
push   在优先级队列中插入一个元素   pqInt.push(10);
pop    删除队首元素（最大的元素）   pqInt.pop();
top    返回指向队列中最大元素（队首元素）的引用   pqInt.top();
empty  检查优先级队列是否为空并返回一个bool值  pqInt.empty();
size   返回优先级队列中的元素个数   size_t nNumElements = pqInt.size();

SLT的三个重要的自适应容器： stack, queue, priority_queue.
队列不支持迭代器，只能访问队尾的元素
STL算法使用迭代器，但自适应容器类没有提供标记范围两端的迭代器，因此无法使用STL算法。





