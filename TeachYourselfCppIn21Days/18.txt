第18章 STL动态数组类

动态数组能够灵活存储数据，无需在编写时知道数组长度。标准模板库(STL)通过std::vector类提供了此需求的解决方案。
头文件 #include <vector>
std::vector是个模板类，提供了动态数组的通用功能：
1.在数组末尾添加元素所需的时间是固定的，不随数组大小而异，在末尾删除元素也是如此；
2.在数组中间添加或删除元素所需的时候与该元素后面的元素个数成正比；
3.存储的元素数是动态的，而vector类负责管理内存。
实例化用法：std::vector <typename> vecArrayName(parameter list);
在vector中插入元素时，将插到数组末尾，使用成员方法.push_back()完成。
查看数组中元素的个数，使用成员方法.size()完成。
如果已经指定了vector要存储的元素个数，可以像数组的赋值方式对每个元素进行赋值。指定个数后仍然可以进行插入。
vector还提供了.insert()函数来在指定位置插入元素。
vector的成员方法还有.begin(); iterator; .end(); 
在开头或中间插入元素时，会导致vector类将后面的所有元素后移，为要插入的元素腾出空间，开销大，效率低。
访问vector的元素的方法：
使用下标运算符([])以数组语法方式访问；//具有与访问数组元素相同的风险，下标越界的问题。
使用成员函数at()； //在运行阶段检查容器的大小。
使用迭代器vector <>:: iterator 。  //可以使用std::distance来计算元素的偏移量。
将vector末尾的元素删除，可以使用成员方法.pop_back()完成。花费的时间同样固定，不随元素的个数而异。
vector的大小指的是vector实际存储的元素数，vector的容量指的是在重新分配内存以存储更多元素前vector能够存储的元素数。大小<=容量。
大小.size(); 容量.capacity(); 
.reserve()函数增加分配给内部数组的内存，以避免频繁重新分配内存，减少时间，提高性能。
重新分配的逻辑实现是智能的：为避免插入下一个元素时再次重新分配，提前分配了比当前需求更大的容量。（无需手动函数实现）

头文件 #include <deque>
deque是一个STL的动态数组类，与vector非常类似，但支持在数组开头和末尾插入或删除元素。
.push_back()将元素插入到数组末尾；.push_front()将元素插入到数组开头。
.pop_back()将数组末尾的元素删除；.pop_front()将数组开头的元素删除。
同样可以使用迭代器 deque <> :: iterator 和偏移量计算 std::distance。


