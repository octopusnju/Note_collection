第21章 STL map和multimap

包含头文件 #include <map>
标准模板库STL中提供的map和multimap容器类，供需要进行频繁而快速搜索的程序使用。
map和multimap是键-值对容器，支持根据键进行查找。前者只能存储唯一的键，后者能够存储重复的键。
内部结构看起来像一颗二叉树，在插入元素时进行排序，特定位置的元素不能被替换为值不同的新元素。
典型的map实例化语法：
#include <map>
using namespace std;
map <keyType, valueType, predicate=std::less<keyType>> mapObject;
multimap <keyType, valueType, predicate=std::less<keyType>> mmapObject;
实例化时需要指定键的类型、值的类型和可选的谓词（帮助对插入的元素进行排序）。
默认排序标准基于STL函数less<>进行排序，使用<运算符来比较两个对象。可提供一个二元谓词来覆盖此默认排序机制。
map和multimap的大多数函数的用法类似，接受类似的参数，返回类型也类似。
可使用成员函数.insert()来在容器中插入元素。有4种方法在容器中插入元素：
	mapIntToString.insert(MAPINTSTR::value_type(3, "Three"));
	mapIntToString.insert(make_pair(-1, "Minus One"));
	mapIntToString.insert(pair <int,string> (1000, "One Thousand"));
	mapIntToString[1000000] = "One Million"; //最后这种方法是map特有的，其余三种可以用于multimap。
使用迭代器时，迭代器指向的元素是一个键-值对，可以通过成员函数fitst和second来访问键值对的内容。
可使用成员函数.find()来根据给定的【键】在关联容器中查找值。
.find()返回的迭代器指向找到的第一个元素，元素顺序排列，可以用.count()来得知相同元素数量，然后向前移动迭代器依次访问相同元素。
可使用成员函数.erase()删除容器中的元素，具体使用方法有以下几种：
mapObject.erase(key); //将键作为参数，删除所有包含指定键的元素。
mapObject.earse(iElement); //接受迭代器作为参数，并删除迭代器指向的元素。
mapObject.erase(iLowerBound, iUpperBound); //使用迭代器指定边界，将指定范围内的所有元素删除。
有用成员函数：.begin(); .end(); .lower_bound(); .upper_bound();
map和multimap模板的第三个参数是确保map能够正常工作的排序谓词，若不指定则使用默认的<运算符来比较排序。
可以实例化一个排序谓词，来实现自己按照不同的需求来进行排序，返回值应该为bool类型。
排序谓词可以是一个函数，一个实现了运算符()的结构，也可以是一个类。这种可以作为函数的对象称为函数对象，后面会详细介绍。

默认排序谓词std::less<T>。 默认降序排列：map<int,less<int>>；若按照升序排列，则应写为：map<int,greater<int>>


