第16章 标准模板库简介

标准模板库（STL）是一组模板类和函数，向程序员提供了：存储信息的容器，访问容器存储信息的迭代器，操作容器内容的算法。
STL容器：
容器是用于存储数据的STL类，STL提供了两种类型的容器类：顺序容器，关联容器。
顺序容器 按顺序存储数据，具有插入速度快但查找操作较慢的特征。
STL顺序容器包括：
std::vector，操作与动态数组一样，在最后插入数据；允许随机（下标运算符指定位置）访问元素，运行阶段自动调整长度。
std::deque，与std::vector类似，但也允许在开头插入新元素；
std::list，操作与链表一样。普通链表的STL实现，可以使用不连续内存块组织元素。
关联容器 按指定的顺序存储数据，降低插入数据的速度，在查询方面有很大的优势。
STL提供的关联容器包括：
std::set，按顺序排列的唯一值列表；
std::map，存储键-值对，并根据唯一的键将键-值对排序；
std::multiset，与set类似，但允许存储多个值相同的项，不要求值是唯一的；
std::multimap，与map类似，但不要求键是唯一的。
使用遵循标准的容器时，代码更容易移植。虽然会使性能呈对数降低，但可能并不严重影响程序。

STL容器类的特点：
std::vector     顺序容器
优点：在末尾插入数据时快（时间固定），可以像访问数组一样进行访问。
缺点：调整大小时将影响性能，搜索时间与容器中的元素个数成正比，只能在末尾插入数据。
std::deque      顺序容器
优点：具备vector的所有优点，还可在容器开头插入数据，插入时间也是固定的。
缺点：有vector的所有缺点，但与vector不同的是，根据规范，deque不需要支持reserve()函数，该函数让程序员能够给vector预留内存空间，以免频繁地调整大小以提高性能。
std::list       顺序容器
优点：在list开头、中间或末尾插入数据，所需时间都是固定的；将元素从list中删除所需的时间是固定的，而不管元素的位置如何；插入或删除元素后，指向list中其他元素的迭代器仍有效。
缺点：不能像数组那样根据索引随机访问元素；搜索速度比vector慢，因为元素没有存储在连续的内存单元中；搜索时间与容器中的元素个数成正比。
std::set        关联容器
优点：搜索时间不与容器中的元素个数成正比，因此搜索速度通常比顺序容器快得多。
缺点：元素的插入速度比顺序容器慢。
std::multiset   关联容器
优点：优点与std::set类似；需要在排序的容器中存储非唯一的元素时，可使用这种容器。
缺点：缺点与std::set类似。
std::map        关联容器
优点：用于存储键-值对的容器，并根据键进行排序；搜索时间不与容器中的元素个数成正比，因此搜索速度通常比顺序容器快得多。
std::multimap   关联容器
优点：优点与std::map类似；在需要存储键-值且要求键不唯一时，可选择这种容器。
缺点：缺点与std::map类似。

最简单的迭代器是指针。可以通过递增来指向下一个元素，并对当前位置元素进行操作。
STL中的迭代器是模板类，属于泛型指针，能对STL容器进行操作。
STL提供的迭代器分为两大类：输入迭代器和输出迭代器。
两种基本迭代器可进一步分为三类：前向迭代器（用于单向链表），双向迭代器（用于双向链表），随机访问迭代器（用于数组）。

STL算法：（查找、排序和反转等都是标准的编程需求）
std::find，在集合中查找值；
std::find_if，根据用户指定的谓词在集合中查找值；
std::reverse，反转集合中元素的排列顺序；
std::remove_if，根据用户定义的谓词将元素从集合中删除；
std::transform，使用用户定义的变换函数对容器中的元素进行变换。
迭代器是算法和其操作的容器之间的桥梁。

应用实例：
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int main()
{
	//A dynamic array of integers
	vector <int> vecIntArray;
	//Insert sample intergers into the array
	vecIntArray.push_back(50);
	vecIntArray.push_back(2991);
	vecIntArray.push_back(23);
	vecIntArray.push_back(9999);
	cout << "The contents of the vector are: " << endl;
	//Walk the vector and read values using an iterator
	vector <int>::iterator iArrayWalker = vecIntArray.begin();
	while(iArrayWalker != vecIntArray.end())
	{
		//Write the value to the screen
		cout << * iArrayWalker << endl;
		//Increment the iterator to access the next element
		++ iArrayWalker;
	}
	//Find an element (say 2991) in the array using the 'find' algorithm...
	vector <int>::iterator iElement = find(vecIntArray.begin(), vecIntArray.end(), 2991);
	//Check if value was found
	if(iElement != vecIntArray.end())
	{
		//Value was found... Determine position in the array
		int nPosition = distance(vecIntArray.begin(), iElement);
		cout << "Value " << * iElement;
		cout << " found in the vector at position: " << nPosition << endl;
	}
	return 0;
}




