第11章 实现继承

继承是一种层次性的结构，分类。C++允许定义从另一个类派生出类来表示这种层次结构关系。  动物派生出狗，狗从动物中继承。
原来的类被称为新类的基类。 基类可以有多个派生类。
派生的语法：  class derivedClass : accessType baseClass     accessType目前总是使用public，后面会进行深入讨论。
private在当前类之外不能被直接访问，派生类也无法直接访问。
protected使这些数据对当前类及其派生类来说都是可见的，但对于其他类来说是私有的。
构造函数的初始化方式：1.在大括号的函数内容里面初始化元素；2.constructor(): element(value) {}直接初始化。
构造函数和析构函数的继承性：
创建时首先调用基类的构造函数，创建基类对象，然后调用派生类的构造函数，完成派生对象的创建。
销毁时首先调用派生类的析构函数，然后调用基类的析构函数，在对象被销毁后进行清理。
在派生类中重载构造函数：通过在派生类的构造函数名后加上冒号、基类名和基类构造函数需要的参数，可以在初始化期间对基类进行初始化。
任何时候下，创建派生类对象都会调用基类的构造函数，但默认调用默认函数，通过显示调用可以明确意图。
派生类可以覆盖基类函数，意味着在派生类中修改其实现：在派生类中创建一个返回值和调整标与基类成员函数相同但实现不同的函数。
多个对象的清除顺序与创建顺序相反。
重载：创建多个名称相同但特征不同的方法；覆盖：在派生类中创建一个名称和特征表都与基类方法相同的方法。
如果基类的方法存在重载，而派生类中声明了一个方法进行覆盖，则会覆盖基类中所有名称相同的方法。
隐藏：覆盖任一个重载方法（或者只是名称相同，并未覆盖）后，该方法的所有版本都将被隐藏；若不想将其隐藏，则需要逐个覆盖。
覆盖基类方法后，仍可以通过限定方法名来调用它：在方法名前加上基类名和两个冒号 Object.baseClass::Method()
C++扩展的多态性，允许将派生类对象赋给指向基类的指针。    baseClass * pBaseClass = new newClass; 
创建新的newClass对象，返回一个指向该对象的指针，将指针赋给一个baseClass指针，此指针不可以直接访问派生类对象方法。
虚方法，虚函数：
虽然用上面的方法创建了指向baseClass的指针，但可以通过关键字virtual在baseClass中来定义虚方法，使此指针调用newClass中的方法。
Object.baseClass::Method():由高级对象调用低级类方法
virtual:由低级指向指针调用实际高级对象中的类方法。
当且仅当类里包含至少一个虚函数（或将类当做基类）的时候才去声明虚析构函数，否则解除内存是不会调用派生类的析构函数的。
动态绑定（运行阶段绑定）：程序编译时无法知道要创建什么样的对象，对象的指向是在运行阶段确定的。
虚函数的工作原理：每个类都有一个虚函数表和一个指向虚函数表的指针，虚函数指针在基类被初始化后指向基类函数，派生类初始化后调整指向为派生类函数。
派生类中的覆盖基类虚方法的方法即使不声明也是虚方法。
C++不赞成对象间的强制类型转换，容易出现问题。
作为函数参数传递指向派生类的基类时：按指针传递和按引用传递都可以通过虚方法访问派生类成员；按值传递则只传递基类对象，切除派生部分，也不能访问派生部分。
构造函数不能是虚函数。
虚复制构造函数(virtual copy constructor)：  
派生类中的定义：                                         基类中的定义：
virtual Class * Clone() { return new Class(*this); }     virtual bClass * Clone() { return new bClass(*this); }
Class(const Class &Object) : baseClass(Object) {}        bClass(const bClass &Object) : bData(Object.GetData()) {} 
关键字this指向当前对象，*this即为当前对象。
使用虚方法的代价：包含虚方法的类必须维护一个虚函数表，会带来一些额外开销。
public公有继承：派生类可以使用基类的公有和保护成员，并覆盖其虚方法。
private私有继承：派生类能够使用基类的所有功能，覆盖其虚函数，但派生类对象不能从外部访问基类及其函数，基类所有内容为私有。
通过私有继承让派生类能够使用基类的公有方法，同时禁止派生类对象使用这些方法。
原始的基类状况：
公有函数（可被外部访问，可访问私有成员）；
保护函数（不可被外部访问，可被公有函数访问）；
私有函数（不可被外部访问，可被公有函数访问）。
公有继承后的基类状况： 
公有函数（可被外部访问，可被派生类函数访问，可访问私有成员）；
保护函数（不可被外部访问，可被公有函数访问，可被派生类函数访问）；
私有函数（不可被外部访问，可被公有函数访问，不可被派生类函数访问）。
私有继承后的基类状况：
公有函数（不可被外部访问，可被派生类函数访问，可访问私有成员）；
保护函数（不可被外部访问，可被公有函数访问，可被派生类函数访问）；
私有函数（不可被外部访问，可被公有函数访问，不可被派生类函数访问）。
私有方式继承可以通过修改使基类作为派生类的一个私有成员，这称为聚合或组合。消除了继承层次结构，避免了虚方法使用和虚函数表。
私有继承的优点：派生类能够访问基类的保护成员函数；派生类可以覆盖基类的虚函数。缺点：性能降低，容易出错。
虚函数表的开销伴随第一个虚方法的创建而发生，之后创建其他虚方法带来的开销很小。
