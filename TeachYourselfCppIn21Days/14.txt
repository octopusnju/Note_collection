第14章 类型转换运算符

可改变对象解释方式的运算符称为类型转换运算符。
类型转换是一种机制，暂时或永久改变编译器对对象的解释，而并没有改变对象本身。
C++编程社区分裂为两个阵营：继续在C++程序中使用C风格类型转换（简单便捷性）；使用C++编译器引入的类型转换关键字（语法纯粹论）。
C语言中没有bool型。   C风格：(typename) parameter;
C风格类型转换实际上是强迫编译器根据选择来解释目标对象，对于不希望类型转换破坏类型安全的C++程序员来说无法接受。
C++提供了一种新的类型转换运算符，用于基于继承的情形，C语言中不存在此情形。
C++类型转换符：static_cast, dynamic_cast, reinterpret_cast, const_cast
语法：destination_type result = cast_type <destination_type> (object_to_be_casted);

static_cast(静态类型转换)用于在相关类型的指针之间进行转换，还可显式执行标准数据类型的类型转换。
可将指针向上转换为基类类型，也可向下转换为派生类型。必须转换为相关的类型，不像C语言可以转换为完全不相关的。
只验证指针类型是否相关，而不会执行运行阶段的检查，可能导致指针指向不完整对象，出现意外结果。
默认类型转换显式表示：double a=1.2; int b=a;(默认将double型转换为int型)   double a=1.2; int b=static_cast <int> (a);(显式转换)

dynamic_cast(动态类型转换)在运行阶段执行类型转换，可检查操作结果来判断类型转换是否成功。
典型语法：destination_type * pDest = dynamic_static <class_type *> (pSource);  if(pDest) statement; 
这种在运行阶段识别对象类型的机制称为运行阶段类型识别（runtime type identification, RTTI）。

reinterpret_cast是C++中与C风格类型转换最接近的类型转换运算符，能够将一种对象类型转换为另一种，不管是否相关。
强制编译器接受static_cast通常不允许的类型转换，通常用于低级程序，将数据转换为API能够接受的简单类型。（会被警告）

const_cast让程序员能够关闭对象的访问修饰符const。能够在特殊情况下对不可更改的函数进行更改。
应将使用const_cast来调用非cast函数作为【最后的手段】，因为修改cast对象可能导致不可预料的行为。也可以用于指针。

并非所有人都喜欢C++类型转换，其语法繁琐-不够直观-显得多余。
使用static_cast的优点常常被其拙劣的语法所掩盖。
在现代C++中，除dynamic_cast外的类型转换都是可以避免的，仅当需要满足遗留程序的需求时才需要其他类型转换运算符。
一般而言，应避免使用类型转换。

在100%确定指向的对象与要转换的类型相同时，使用static_cast转换可提高性能，否则要使用dynamic_cast转换并判断是否成功。


